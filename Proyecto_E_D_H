# Librerias
# Libreris para la parte 1
import numpy as np
# Librerias para la parte 2
from queue import Queue
from queue import LifoQueue
from queue import PriorityQueue
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.cm as cm
# Libreris para la parte
import math
# Librerias para la parte 5
# import numpy as np
# import matplotlib.pyplot as plt
from scipy.spatial import Voronoi, voronoi_plot_2d


### ETAPA 1 ###
# Funcion para graficar los recorridos de la matriz de 8 electrodos

def graficasCaminos8(caminos):
    channels = ['Fz', 'C3', 'Cz', 'C4', 'Pz', 'PO7', 'Oz', 'PO8']

    points3D = [[0, 0.71934, 0.694658], [-0.71934, 0, 0.694658], [0, 0, 1], [0.71934, 0, 0.694658],
                [0, -0.71934, 0.694658], [-0.587427, -0.808524, -0.0348995], [0, -0.999391, -0.0348995],
                [0.587427, -0.808524, -0.0348995]]
    points3D = np.array(points3D)

    r = np.sqrt(points3D[:, 0] ** 2 + points3D[:, 1] ** 2 + points3D[:, 2] ** 2)
    t = r / (r + points3D[:, 2])
    x = r * points3D[:, 0]
    y = r * points3D[:, 1]
    points2D = np.column_stack((x, y))

    circle = plt.Circle((0, 0), 1, color='r', alpha=0.25, fill=False)
    plt.scatter(points2D[:, 0], points2D[:, 1])
    plt.gca().add_patch(circle)

    for i in range(len(points2D)):
        plt.text(points2D[i, 0] - 0.02, points2D[i, 1] + 0.025, channels[i])

    index = []

    for x in caminos:
        index.append(channels.index(x))

    print("index : ", index)

    # Resaltar la aristas

    for i in range(len(index) - 1):
        plt.plot([points2D[index[i], 0], points2D[index[i + 1], 0]],
                 [points2D[index[i], 1], points2D[index[i + 1], 1]],
                 color='blue', linestyle='--', linewidth=2)

    plt.axis('equal')
    plt.show()


# Funcion para graficar los recorridos de la matriz de 32 electrodos

def graficasCaminos32(caminos):
    channels = ['Fp1', 'Fp2', 'AF3', 'AF4', 'F7', 'F3', 'Fz', 'F4', 'F8', 'FC5', 'FC1', 'FC2', 'FC6', 'T7', 'C3', 'Cz',
                'C4', 'T8', 'CP5', 'CP1', 'CP2', 'CP6', 'P7', 'P3', 'Pz', 'P4', 'P8', 'PO3', 'PO4', 'O1', 'Oz', 'O2']

    points3D = [[-0.308829, 0.950477, -0.0348995], [0.308829, 0.950477, -0.0348995], [-0.406247, 0.871199, 0.275637],
                [0.406247, 0.871199, 0.275637], [-0.808524, 0.587427, -0.0348995], [-0.545007, 0.673028, 0.5],
                [0, 0.71934, 0.694658], [0.545007, 0.673028, 0.5], [0.808524, 0.587427, -0.0348995],
                [-0.887888, 0.340828, 0.309017], [-0.37471, 0.37471, 0.848048], [0.37471, 0.37471, 0.848048],
                [0.887888, 0.340828, 0.309017], [-0.999391, 0, -0.0348995], [-0.71934, 0, 0.694658], [0, 0, 1],
                [0.71934, 0, 0.694658], [0.999391, 0, -0.0348995], [-0.887888, -0.340828, 0.309017],
                [-0.37471, -0.37471, 0.848048], [0.37471, -0.37471, 0.848048], [0.887888, -0.340828, 0.309017],
                [-0.808524, -0.587427, -0.0348995], [-0.545007, -0.673028, 0.5], [0, -0.71934, 0.694658],
                [0.545007, -0.673028, 0.5], [0.808524, -0.587427, -0.0348995], [-0.406247, -0.871199, 0.275637],
                [0.406247, -0.871199, 0.275637], [-0.308829, -0.950477, -0.0348995], [0, -0.999391, -0.0348995],
                [0.308829, -0.950477, -0.0348995]]
    points3D = np.array(points3D)

    r = np.sqrt(points3D[:, 0] ** 2 + points3D[:, 1] ** 2 + points3D[:, 2] ** 2)
    t = r / (r + points3D[:, 2])
    x = r * points3D[:, 0]
    y = r * points3D[:, 1]
    points2D = np.column_stack((x, y))

    circle = plt.Circle((0, 0), 1, color='r', alpha=0.25, fill=False)
    plt.scatter(points2D[:, 0], points2D[:, 1])
    plt.gca().add_patch(circle)

    for i in range(len(points2D)):
        plt.text(points2D[i, 0] - 0.02, points2D[i, 1] + 0.025, channels[i])

    index = []
    for x in caminos:
        index.append(channels.index(x))

    # Resaltar la arista entre Fz y PO8
    for i in range(len(index) - 1):
        plt.plot([points2D[index[i], 0], points2D[index[i + 1], 0]],
                 [points2D[index[i], 1], points2D[index[i + 1], 1]],
                 color='blue', linestyle='--', linewidth=2)

    plt.axis('equal')
    plt.show()



#ETAPA 2: - An√°lisis de caminos en los grafos de conectividad



class WeightedGraph:
    """
        Class that is used to represent a weighted graph. Internally, the class uses an adjacency list to store
        the vertices and edges of the graph. This adjacency list is defined by a dictionary, whose keys
        represent the vertices. For each vertex, there is a list of tuples (v,e) that indicate which vertices
        are connected to the vertex and their corresponding weights.

        The graph can be directed or indirected. In the class constructor, this property is set. The
        behaviour of some operations depends on this property.

        This graph class assumes that it is possible to have multiple links between vertices.
    """

    _directed = True  # This flag indicates whether the graph is directed or indirected.

    _adjacency_list = {}  # The adjacency list of the graph.

    def __init__(self, directed: bool = False):
        """
            This constructor initializes an empty graph.

            param directed: A flag that indicates whether the graph is directed (True) or undirected (False).
        """

        self._directed = directed
        self._adjacency_list = {}

    def clear(self):
        """
            This method clears the graph.
        """
        self._adjacency_list = {}

    def number_of_vertices(self):
        """
            This method returns the number of vertices of the graph.
        """
        return len(self._adjacency_list)

    def vertices(self):
        """
            This method returns the list of vertices.
        """
        v = []
        for vi in self._adjacency_list:
            v.append(vi)
        return v

    def edges(self):
        """
            This method returns the list of edges.
        """
        e = []

        if self._directed:
            for v in self._adjacency_list:
                for edge in self._adjacency_list[v]:
                    e.append((v, edge[0], edge[1]))

        else:
            for v in self._adjacency_list:
                for edge in self._adjacency_list[v]:
                    if (edge[0], v, edge[1]) not in e:
                        e.append((v, edge[0], edge[1]))
        return e

    def add_vertex(self, v):
        """
            Add vertex to the graph.

            param v: The new vertex to be added to the graph.
        """

        if v in self._adjacency_list:
            print("11Warning: Vertex ", v, " already exists.")

        else:
            self._adjacency_list[v] = []

    def remove_vertex(self, v):
        """
            Remove vertex from the graph.

            param v: The vertex to be removed from the graph.
        """

        if v not in self._adjacency_list:
            print("10Warning: Vertex ", v, " is not in graph.")

        else:
            # Remove vertex from adjacency list.
            self._adjacency_list.remove(v)

            # Remove edges where the vertex is an end point.
            for vertex in self._adjacency_list:
                for edge in self._adjacency_list[vertex]:
                    if edge[0] == v:
                        self._adjacency_list[vertex].remove(edge)

    def add_edge(self, v1, v2, e=0):
        """
            Add edge to the graph. The edge is defined by two vertices v1 and v2, and
            the weigth e of the edge.

            param v1: The start vertex of the new edge.
            param v2: The end vertex of the new edge.
            param e: The weight of the new edge.
        """

        if v1 not in self._adjacency_list:
            # The start vertex does not exist.
            print("9Warning: Vertex ", v1, " does not exist.")

        elif v2 not in self._adjacency_list:
            # The end vertex does not exist.
            print("8Warning: Vertex ", v2, " does not exist.")

        elif not self._directed and v1 == v2:
            # The graph is undirected, so it is no allowed to have autocycles.
            print("7Warning: An undirected graph cannot have autocycles.")

        elif (v2, e) in self._adjacency_list[v1]:
            # The edge is already in graph.
            print("6Warning: The edge (", v1, ",", v2, ",", e, ") already exists.")
        else:
            self._adjacency_list[v1].append((v2, e))
            if not self._directed:
                self._adjacency_list[v2].append((v1, e))

    def remove_edge(self, v1, v2, e):
        """
            Remove edge from the graph.

            param v1: The start vertex of the edge to be removed.
            param v2: The end vertex of the edge to be removed.
            param e: The weight of the edge to be removed.
        """

        if v1 not in self._adjacency_list:
            # v1 is not a vertex of the graph
            print("5Warning: Vertex ", v1, " does not exist.")

        elif v2 not in self._adjacency_list:
            # v2 is not a vertex of the graph
            print("4Warning: Vertex ", v2, " does not exist.")

        else:
            for edge in self._adjacency_list[v1]:
                if edge == (v2, e):
                    self._adjacency_list[v1].remove(edge)

            if not self._directed:
                for edge in self._adjacency_list[v2]:
                    if edge == (v1, e):
                        self._adjacency_list[v2].remove(edge)

    def adjacent_vertices(self, v):
        """
            Adjacent vertices of a vertex.

            param v: The vertex whose adjacent vertices are to be returned.
            return: The list of adjacent vertices of v.
        """

        if v not in self._adjacency_list:
            # The vertex is not in the graph.
            print("3Warning: Vertex ", v, " does not exist.")
            return []

        else:
            return self._adjacency_list[v]

    def is_adjacent(self, v1, v2) -> bool:
        """
            This method indicates whether vertex v2 is adjacent to vertex v1.

            param v1: The start vertex of the relation to test.
            param v2: The end vertex of the relation to test.
            return: True if v2 is adjacent to v1, False otherwise.
        """

        if v1 not in self._adjacency_list:
            # v1 is not a vertex of the graph
            print("1Warning: Vertex ", v1, " does not exist.")
            return False

        elif v2 not in self._adjacency_list:
            # v2 is not a vertex of the graph
            print("2Warning: Vertex ", v2, " does not exist.")
            return False

        else:
            for edge in self._adjacency_list[v1]:
                if edge[0] == v2:
                    return True
            return False

    def graficas(self, matrizTexto, coordenadasTexto):
        print(matrizTexto)
        matriz = np.loadtxt(matrizTexto, dtype=int)
        coordenadas = np.loadtxt(coordenadasTexto, dtype=str)

        for i in range(len(coordenadas)):
            self.add_vertex(coordenadas[i][0])

        for i in range(len(coordenadas)):
            for x in range(len(matriz[i])):
                if (matriz[i][x] == 1 and self.is_adjacent(coordenadas[i][0], coordenadas[x][0]) == False):
                    costo = distancia(float(coordenadas[i][1]), float(coordenadas[i][2]), float(coordenadas[i][3]),
                                      float(coordenadas[x][1]), float(coordenadas[x][2]), float(coordenadas[x][3]))
                    self.add_edge(coordenadas[i][0], coordenadas[x][0], costo)

        self.print_graph()

    def print_graph(self):
        # Muestra las aristas de la grafica
        for vertex in self._adjacency_list:
            for edges in self._adjacency_list[vertex]:
                print(vertex, " -> ", edges[0], " peso ", edges[1])


# ------------------------------------------------------------------------------------------------------------------
#   Class TreeNode
# ------------------------------------------------------------------------------------------------------------------
class TreeNode:
    """
        Class that is used to represent a node in the search algorithm. A node contains the following elements:
        * A reference to its parent.
        * The vertex of the graph that is represented.
        * The total path cost from the root to the node.
    """

    def __init__(self, parent, v, c):
        """
            This constructor initializes a node.

            param parent: The node parent.
            param v: The graph vertex that is represented by the node.
            param c: The path cost to the node from the root.
        """
        self.parent = parent
        self.v = v
        self.c = c

    def __lt__(self, node):
        """
            Operator <. This definition is requiered by the PriorityQueue class.
        """
        return False;

    def path(self):
        """
            This method builds a list with the vertices of the path from the root to the node.

            return: The path from the root to the node
        """
        node = self
        path = []
        while node != None:
            path.insert(0, node.v)
            node = node.parent
        return path;


# ------------------------------------------------------------------------------------------------------------------
#   Breadth-first search algorithm
# ------------------------------------------------------------------------------------------------------------------
def bfs(graph: WeightedGraph, v0, vg):
    """
        This method finds a path in a graph from vertices v0 to vg using the breadth-first search
        algorithm.

        param graph: The graph to traverse.
        param v0: The initial vertex.
        param vg: The goal vertex.
        return: A tuple with the path from vi to vg and its costs, or null if there is no a path.
    """

    # Check graph and vertices
    if v0 not in graph.vertices():
        print("Warning: Vertex", v0, "is not in Graph")

    if vg not in graph.vertices():
        print("Warning: Vertex", vg, "is not in Graph")

    # Initialize frontier
    frontier = Queue()
    frontier.put(TreeNode(None, v0, 0))

    # Initialize explored set
    explored_set = {}

    while True:
        if frontier.empty():
            return None

        # Get node from frontier
        node = frontier.get()

        # Test node
        if node.v == vg:
            # Return path and cost as a dictionary
            return {"Path": node.path(), "Cost": node.c}

        # Expand node
        if node.v not in explored_set:
            adjacent_vertices = gr.adjacent_vertices(node.v)
            for vertex in adjacent_vertices:
                frontier.put(TreeNode(node, vertex[0], vertex[1] + node.c))

        # Add node to the explored set
        explored_set[node.v] = 0


# ------------------------------------------------------------------------------------------------------------------
#   Depth-first search algorithm
# ------------------------------------------------------------------------------------------------------------------
def dfs(graph: WeightedGraph, v0, vg):
    """
        This method finds a path in a graph from vertices v0 to vg using the depth-first search
        algorithm.

        param graph: The graph to be traverse.
        param v0: The initial vertex.
        param vg: The goal vertex.
        return: A tuple with the path from vi to vg and its costs, or null if there is no a path.
    """

    # Check graph and vertices
    if v0 not in graph.vertices():
        print("Warning: Vertex", v0, "is not in Graph")

    if vg not in graph.vertices():
        print("Warning: Vertex", vg, "is not in Graph")

    # Initialize frontier
    frontier = LifoQueue()
    frontier.put(TreeNode(None, v0, 0))

    # Initialize explored set
    explored_set = {}

    while True:
        if frontier.empty():
            return None

        # Get node from frontier
        node = frontier.get()

        # Test node
        if node.v == vg:
            # Return path and cost as a dictionary
            return {"Path": node.path(), "Cost": node.c}

        # Expand node
        if node.v not in explored_set:
            adjacent_vertices = gr.adjacent_vertices(node.v)
            for vertex in adjacent_vertices:
                frontier.put(TreeNode(node, vertex[0], vertex[1] + node.c))

        # Add node to explored set
        explored_set[node.v] = 0


# ------------------------------------------------------------------------------------------------------------------
#   Uniform cost search algorithm
# ------------------------------------------------------------------------------------------------------------------
def uniform_cost(graph: WeightedGraph, v0, vg):
    """
        This method finds a path in a graph from vertices v0 to vg using the uniform cost search
        algorithm.

        param graph: The graph to traverse.
        param v0: The initial vertex.
        param vg: The goal vertex.
        return: A tuple with the path from vi to vg and its costs, or null if there is no a path.
    """

    # Check graph and vertices
    if v0 not in graph.vertices():
        print("Warning: Vertex", v0, "is not in Graph")

    if vg not in graph.vertices():
        print("Warning: Vertex", vg, "is not in Graph")

    # Initialize frontier
    frontier = PriorityQueue()
    frontier.put((0, TreeNode(None, v0, 0)))

    # Initialize explored set
    explored_set = {}

    while True:
        if frontier.empty():
            return None

        # Get node from frontier
        node = frontier.get()[1]

        # Test node
        if node.v == vg:
            # Return path and cost as a dictionary
            return {"Path": node.path(), "Cost": node.c}

        # Expand node
        if node.v not in explored_set:
            adjacent_vertices = gr.adjacent_vertices(node.v)
            for vertex in adjacent_vertices:
                cost = vertex[1] + node.c
                frontier.put((cost, TreeNode(node, vertex[0], vertex[1] + node.c)))

        # Add node to explored set
        explored_set[node.v] = 0


class GraphFloyd:
    def __init__(self, directed: bool = False):
        self._directed = directed
        self._vertices = []
        self._adjacency_matrix = []

    def add_vertex(self, v):
        if v not in self._vertices:
            self._vertices.append(v)
            n = len(self._vertices)

            if n > 1:
                for vertex in self._adjacency_matrix:
                    vertex.append(0)

            self._adjacency_matrix.append(n * [0])

    def remove_vertex(self, v):
        if v in self._vertices:
            index = self._vertices.index(v)

            self._vertices.pop(index)

            for row in self._adjacency_matrix:
                row.pop(index)

            self._adjacency_matrix.pop(index)

    def add_edge(self, v1, v2, e=0):
        if v1 in self._vertices and v2 in self._vertices:
            index1 = self._vertices.index(v1)
            index2 = self._vertices.index(v2)
            self._adjacency_matrix[index1][index2] = e

            if not self._directed:
                self._adjacency_matrix[index2][index1] = e

    def remove_edge(self, v1, v2):
        if v1 in self._vertices and v2 in self._vertices:
            index1 = self._vertices.index(v1)
            index2 = self._vertices.index(v2)
            self._adjacency_matrix[index1][index2] = 0

            if not self._directed:
                self._adjacency_matrix[index2][index1] = 0

    def is_adjacent(self, v1, v2) -> bool:
        if v1 in self._vertices and v2 in self._vertices:
            i = self._vertices.index(v1)
            j = self._vertices.index(v2)
            return self._adjacency_matrix[i][j] != 0
        return False

    def graficas(self, matrizTexto, coordenadasTexto):
        print(matrizTexto)
        matriz = np.loadtxt(matrizTexto, dtype=int)
        coordenadas = np.loadtxt(coordenadasTexto, dtype=str)

        for i in range(len(coordenadas)):
            self.add_vertex(coordenadas[i][0])

        for i in range(len(coordenadas)):
            for x in range(len(matriz[i])):
                if (matriz[i][x] == 1 and self.is_adjacent(coordenadas[i][0], coordenadas[x][0]) == False):
                    costo = distancia(float(coordenadas[i][1]), float(coordenadas[i][2]), float(coordenadas[i][3]),
                                      float(coordenadas[x][1]), float(coordenadas[x][2]), float(coordenadas[x][3]))
                    self.add_edge(coordenadas[i][0], coordenadas[x][0], costo)

        # self.print_graph()

    def print_graph(self):
        n = len(self._vertices)
        for i in range(n):
            for j in range(n):
                if self._adjacency_matrix[i][j] != 0:
                    print(self._vertices[i], " -> ", self._vertices[j], " edge weight: ", self._adjacency_matrix[i][j])


# Funciones para obtener los caminos
def bfs(graph: WeightedGraph, v0, vg):
    # Recorrido en anchura (Breadth-first), de v0 a vg
    # Regresa una tupla con el camino de vi a vg y el costo, en caso de no existir regresa null

    # Checar si los vrtices no existen
    if v0 not in graph.vertices():
        print("ALERTA;--- vertex ", v0, " no existe")

    if vg not in graph.vertices():
        print("ALERTA -  vertice ", vg, " no existe")

    # Inicializar frontera
    frontier = Queue()
    frontier.put(TreeNode(None, v0, 0))

    # Inicialilzar set de exploracion
    explored_set = {}

    while True:
        if frontier.empty():
            return None

        node = frontier.get()

        # Checar si el nodo es el destino
        if node.v == vg:
            return {"Path": node.path(), "Cost": node.c}

        # Expandir nodo
        if node.v not in explored_set:
            adjacent_vertices = graph.adjacent_vertices(node.v)
            for vertex in adjacent_vertices:
                frontier.put(TreeNode(node, vertex[0], vertex[1] + node.c))

        explored_set[node.v] = 0


def dfs(graph: WeightedGraph, v0, vg):
    # Busqueda de profundidad, del v0 a vg
    # Regresa una tupla con el camino de vi a vg

    # checar si existen los nodos
    if v0 not in graph.vertices():
        print("ALERTA vertice", v0, " no existe")

    if vg not in graph.vertices():
        print("ALERTA vertice ", vg, " no existe")

    # Inicializar frontera
    frontier = LifoQueue()
    frontier.put(TreeNode(None, v0, 0))

    explored_set = {}

    while True:
        if frontier.empty():
            return None

        node = frontier.get()

        # Checar node
        if node.v == vg:
            return {"Path": node.path(), "Cost": node.c}

        if node.v not in explored_set:
            adjacent_vertices = graph.adjacent_vertices(node.v)
            for vertex in adjacent_vertices:
                frontier.put(TreeNode(node, vertex[0], vertex[1] + node.c))

        explored_set[node.v] = 0


def uniform_cost(graph: WeightedGraph, v0, vg):
    # Costo uniforme de v0 a vg
    # Regresa  una tupla del camino entre v0 a vg con su costo

    # Checar si existen
    if v0 not in graph.vertices():
        print("ALERTA vertice", v0, " no existe")

    if vg not in graph.vertices():
        print("ALETA vertice ", vg, " no existe")

    # Inicializar frontera
    frontier = PriorityQueue()
    frontier.put((0, TreeNode(None, v0, 0)))

    explored_set = {}

    while True:
        if frontier.empty():
            return None

        node = frontier.get()[1]

        # Checar si el node es el que se busca
        if node.v == vg:
            # Regresa el camino y costo como diccionario
            return {"Path": node.path(), "Cost": node.c}

        # Expandir nodo
        if node.v not in explored_set:
            adjacent_vertices = graph.adjacent_vertices(node.v)
            for vertex in adjacent_vertices:
                cost = vertex[1] + node.c
                frontier.put((cost, TreeNode(node, vertex[0], vertex[1] + node.c)))

        explored_set[node.v] = 0


# Funcion para medir la distancia 3d entre 2 puntos para obtener el peso
def distancia(xA, yA, zA, xB, yB, zB):
    punto1 = np.array([xA, yA, zA])
    punto2 = np.array([xB, yB, zB])
    distancia = np.linalg.norm(punto2 - punto1)
    return distancia


# Funcion para llamar a hacer los caminos, BFD, DFS, Uniform cost
def ejecutar_algoritmo(algoritmo, grafica, inicio, destino, graficar):
    print(f"-----{algoritmo.__name__}-----")
    for x in range(len(inicio)):
        print(f"Viaje de {inicio[x]} -> {destino[x]}")
        res = algoritmo(grafica, inicio[x], destino[x])
        if res is not None:
            if graficar == 0:
                graficasCaminos8(res["Path"])
            else:
                graficasCaminos32(res["Path"])
        print(res)


def prepCaminos(arregloO_D, graficar, grafica=WeightedGraph):
    print("-----Recorridos de grafos-----")

    for algorithm in [bfs, dfs, uniform_cost]:
        ejecutar_algoritmo(algorithm, grafica, [x[0] for x in arregloO_D], [x[1] for x in arregloO_D], graficar)


# Funciones para graficar las graficas con todos sus caminos
def generate_3d_points():
    return np.array([[0, 0.71934, 0.694658],
                     [-0.71934, 0, 0.694658],
                     [0, 0, 1],
                     [0.71934, 0, 0.694658],
                     [0, -0.71934, 0.694658],
                     [-0.587427, -0.808524, -0.0348995],
                     [0, -0.999391, -0.0348995],
                     [0.587427, -0.808524, -0.0348995]])


def convert_3d_to_2d(points3D):
    r = np.sqrt(points3D[:, 0] ** 2 + points3D[:, 1] ** 2 + points3D[:, 2] ** 2)
    t = r / (r + points3D[:, 2])
    x = r * points3D[:, 0]
    y = r * points3D[:, 1]
    return np.column_stack((x, y))


def plot_2d_points(points2D, channels):
    circle = plt.Circle((0, 0), 1, color='r', alpha=0.25, fill=False)
    plt.scatter(points2D[:, 0], points2D[:, 1])
    plt.gca().add_patch(circle)

    for i in range(len(points2D)):
        plt.text(points2D[i, 0] - 0.02, points2D[i, 1] + 0.025, channels[i])


def plot_edges_2d(points2D, channels, graph):
    for vertex in channels:
        neighbors = graph.adjacent_vertices(vertex)
        if len(neighbors) == 0:
            continue
        for neighbor, weight in neighbors:
            v_index = channels.index(vertex)
            n_index = channels.index(neighbor)
            plt.plot([points2D[v_index, 0], points2D[n_index, 0]],
                     [points2D[v_index, 1], points2D[n_index, 1]],
                     color='blue', linestyle='--', linewidth=2)


# Funciones para graficar las graficas con todos sus caminos
def graficarGraficas8(grafica=WeightedGraph):
    channels = ['Fz', 'C3', 'Cz', 'C4', 'Pz', 'PO7', 'Oz', 'PO8']
    points3D = generate_3d_points()
    points2D = convert_3d_to_2d(points3D)

    plot_2d_points(points2D, channels)
    plot_edges_2d(points2D, channels, grafica)

    plt.axis('equal')
    plt.show()


def generate_3d_points_32():
    return np.array([[-0.308829, 0.950477, -0.0348995],
                     [0.308829, 0.950477, -0.0348995],
                     [-0.406247, 0.871199, 0.275637],
                     [0.406247, 0.871199, 0.275637],
                     [-0.808524, 0.587427, -0.0348995],
                     [-0.545007, 0.673028, 0.5],
                     [0, 0.71934, 0.694658],
                     [0.545007, 0.673028, 0.5],
                     [0.808524, 0.587427, -0.0348995],
                     [-0.887888, 0.340828, 0.309017],
                     [-0.37471, 0.37471, 0.848048],
                     [0.37471, 0.37471, 0.848048],
                     [0.887888, 0.340828, 0.309017],
                     [-0.999391, 0, -0.0348995],
                     [-0.71934, 0, 0.694658],
                     [0, 0, 1],
                     [0.71934, 0, 0.694658],
                     [0.999391, 0, -0.0348995],
                     [-0.887888, -0.340828, 0.309017],
                     [-0.37471, -0.37471, 0.848048],
                     [0.37471, -0.37471, 0.848048],
                     [0.887888, -0.340828, 0.309017],
                     [-0.808524, -0.587427, -0.0348995],
                     [-0.545007, -0.673028, 0.5],
                     [0, -0.71934, 0.694658],
                     [0.545007, -0.673028, 0.5],
                     [0.808524, -0.587427, -0.0348995],
                     [-0.406247, -0.871199, 0.275637],
                     [0.406247, -0.871199, 0.275637],
                     [-0.308829, -0.950477, -0.0348995],
                     [0, -0.999391, -0.0348995],
                     [0.308829, -0.950477, -0.0348995]])


def convert_3d_to_2d(points3D):
    r = np.sqrt(points3D[:, 0] ** 2 + points3D[:, 1] ** 2 + points3D[:, 2] ** 2)
    t = r / (r + points3D[:, 2])
    x = r * points3D[:, 0]
    y = r * points3D[:, 1]
    return np.column_stack((x, y))


def plot_2d_points(points2D, channels):
    circle = plt.Circle((0, 0), 1, color='r', alpha=0.25, fill=False)
    plt.scatter(points2D[:, 0], points2D[:, 1])
    plt.gca().add_patch(circle)

    for i in range(len(points2D)):
        plt.text(points2D[i, 0] - 0.02, points2D[i, 1] + 0.025, channels[i])


def plot_edges_2d(points2D, channels, graph):
    for vertex in channels:
        neighbors = graph.adjacent_vertices(vertex)
        for neighbor, weight in neighbors:
            v_index = channels.index(vertex)
            n_index = channels.index(neighbor)
            plt.plot([points2D[v_index, 0], points2D[n_index, 0]],
                     [points2D[v_index, 1], points2D[n_index, 1]],
                     color='blue', linestyle='--', linewidth=2)


def graficarGraficas32(grafica=WeightedGraph):
    channels = ['Fp1', 'Fp2', 'AF3', 'AF4', 'F7', 'F3', 'Fz', 'F4', 'F8', 'FC5', 'FC1', 'FC2', 'FC6', 'T7', 'C3', 'Cz',
                'C4', 'T8', 'CP5', 'CP1', 'CP2', 'CP6', 'P7', 'P3', 'Pz', 'P4', 'P8', 'PO3', 'PO4', 'O1', 'Oz', 'O2']

    points3D = generate_3d_points_32()
    points2D = convert_3d_to_2d(points3D)

    plot_2d_points(points2D, channels)
    plot_edges_2d(points2D, channels, grafica)

    plt.axis('equal')
    plt.show()


# --------------------------------FLOYD-----------------------------------


class FloydWarshall:
    @staticmethod
    def shortest_paths(adjacency_matrix):
        BIG_NUMBER = 100000000
        n = len(adjacency_matrix)

        matrix = np.array(adjacency_matrix)
        matrix[matrix == 0] = BIG_NUMBER

        for k in range(n):
            for i in range(n):
                for j in range(n):
                    if matrix[i][k] != BIG_NUMBER and matrix[k][j] != BIG_NUMBER and (matrix[i][k] + matrix[k][j]) < \
                            matrix[i][j]:
                        matrix[i][j] = matrix[i][k] + matrix[k][j]

        return matrix


"""
Otra opci√≥n de implementaci√≥n de la clase Floyd-Warshall pero utilizando la librer√≠a networkx
class FloydWarshall:
    @staticmethod
    def shortest_paths(adjacency_matrix):
        # Crear un grafo dirigido con pesos a partir de la matriz de adyacencia
        G = nx.DiGraph(np.array(adjacency_matrix))

        # Calcular el camino m√°s corto utilizando el m√©todo Floyd-Warshall
        shortest_paths_matrix = nx.floyd_warshall_numpy(G)

        return shortest_paths_matrix
"""

"""
#Etapa 3 - An√°lisis de √°rboles de m√≠nima expansi√≥n de los grafos de conectividad
"""


def prim(v0, graph=WeightedGraph, newGraph=WeightedGraph):
    cost = 0
    selected = [v0]
    newGraph.add_vertex(v0)
    remain = []
    vnext = None
    padre = None

    for i in graph.vertices():
        if i != v0 and len(graph.adjacent_vertices(i)) > 0:
            remain.append(i)

    while len(remain) > 0:
        minCost = float('inf')
        padre = None
        vnext = None

        for vector in selected:
            vecinos = graph._adjacency_list[vector]

            for vecino in vecinos:
                cn = vecino[1]

                if (cn < minCost and vecino[0] not in selected):
                    padre = vector
                    minCost = cn
                    vnext = vecino[0]

        if (vnext == None):
            print("No hay solucion")
            return None

        newGraph.add_vertex(vnext)
        newGraph.add_edge(padre, vnext, minCost)

        selected.append(vnext)
        remain.remove(vnext)

        cost = cost + minCost

    print(selected, cost)
    return (selected, cost)


"""
Etapa 4 - Cascos convexos de los v√©rtices de los √°rboles de m√≠nima expansi√≥n
"""

import matplotlib.pyplot as plt
import numpy as np
from math import atan2


def orientation(p, q, r):
    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])
    if val == 0:
        return 0
    return 1 if val > 0 else 2


def graham_scan(points):
    n = len(points)
    if n < 3:
        return []

    pivot = min(points, key=lambda point: (point[1], point[0]))

    points.sort(key=lambda point: (atan2(point[1] - pivot[1], point[0] - pivot[0]), point))

    hull = [points[0], points[1]]

    for i in range(2, n):
        while len(hull) > 1 and orientation(hull[-2], hull[-1], points[i]) != 2:
            hull.pop()
        hull.append(points[i])

    return hull


def plot_convex_hull(mapatxt, hull):
    coordenadas = np.loadtxt(mapatxt, dtype=str)
    x = [float(coordenada[1]) for coordenada in coordenadas]
    y = [float(coordenada[2]) for coordenada in coordenadas]

    convex_x, convex_y = zip(*hull)

    plt.scatter(x, y, marker='o', label='Points')
    plt.plot(convex_x + (convex_x[0],), convex_y + (convex_y[0],), linestyle='-', color='red', label='Convex Hull')
    plt.legend()
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.title('Convex Hull using Graham\'s Scan')
    plt.grid(True)
    plt.show()


if __name__ == "__main__":
    mapatxt = "8elec.txt"  # Reemplaza con la ruta correcta de tu archivo de coordenadas
    coordenadas = np.loadtxt(mapatxt, dtype=str)

    puntos = [(float(coordenada[1]), float(coordenada[2])) for coordenada in coordenadas]
    convex_hull = graham_scan(puntos)

    plot_convex_hull(mapatxt, convex_hull)

"""
Etapa 5 - Representaci√≥n del grado de cada arista con diagramas de Voronoi
"""


def voronoi(coordenadastxt, gr=WeightedGraph):
    coordenadas = np.loadtxt(coordenadastxt, dtype=float, usecols=(1, 2))
    nombres = np.loadtxt(coordenadastxt, dtype=str, usecols=(0))

    aristas = []
    for x in range(len(nombres)):
        vecinos = gr.adjacent_vertices(nombres[x])
        aristas.append(len(vecinos))

    # generate Voronoi tessellation
    vor = Voronoi(coordenadas)

    # find min/max values for normalization
    minima = min(aristas)
    maxima = max(aristas)

    # normalize chosen colormap
    norm = mpl.colors.Normalize(vmin=minima, vmax=maxima, clip=True)
    mapper = cm.ScalarMappable(norm=norm, cmap=cm.Blues_r)

    # plot Voronoi diagram, and fill finite regions with color mapped from aristas value
    voronoi_plot_2d(vor, show_points=True, show_vertices=False, s=1)

    for r in range(len(vor.point_region)):
        region = vor.regions[vor.point_region[r]]
        if not -1 in region:
            polygon = [vor.vertices[i] for i in region]
            plt.fill(*zip(*polygon), color=mapper.to_rgba(aristas[r]))

    plt.show()


"""
Etapa 6 - Reporte
Llamar a las funciones
"""

# Etapa 1 -----------------------------------------------------------------
# Crear la grafica
gr = WeightedGraph(directed=False)

# Enviar a la funcion de graficas, el nombre de la matriz que vas a usar, el mapa de electrodos, y la grafica
# Esto sirve para llenar la grafica de sus vectores y aristas

# 8 electerodos, las personales
# graficas('Lectura_Stef.txt','mapa8electrodos.txt',gr)
# graficas('Memoria_Stef.txt','mapa8electrodos.txt',gr)
#gr1.graficas('Operaciones_Dhali.txt', '8elec.txt')

# Las de 32 electrodos
# graficas('LecturaS0A.txt', 'mapa32electrodos.txt', gr)
# graficas('MemoriaS0A.txt', 'mapa32electrodos.txt', gr)
gr.graficas('Lectura_S0A.txt', '32elec.txt')

# Arreglo origen destino, tuplas de donde parte a donde va el camino a explorar
# Arreglo para los viajes de 8 electrodos
#arregloOD8 = [('Fz', 'PO8'), ('C3', 'Oz'), ('PO7', 'C4'), ('Oz', 'PO7'), ('Cz', 'Pz')]

# Arreglo para los viajes de 32 electrodos
arregloOD32 = [('F7', 'PO4'), ('CP5', 'O2'), ('P4', 'T7'), ('AF3', 'CP6'), ('F8', 'CP2'), ('CP1', 'FC2'), ('F3', 'O1')]

# Para graficar la grafica junto con sus caminos
# prepCaminos(arregloOD8, 0, gr1)
prepCaminos(arregloOD32, 1, gr)

# graficarGraficas8(gr1)
graficarGraficas32(gr)

"""
    Para ver los caminos se usa la funcion de prepCaminos
    se envia el arregloOD correspondiente y la grafica
    Para ver los caminos, 0 grafica de 8, 1 grafica de 32
"""

#gr2 = GraphFloyd(directed=False)

# Matriz de conexion, 0 y 1
#gr2.graficas('Operaciones_Dhali.txt', '8elec.txt')
# graficas('Memoria_Stef.txt', 'mapa8electrodos.txt', grFloyd)
# graficas('Operaciones_Stef.txt', 'mapa8electrodos.txt', grFloyd)

# graficas('LecturaS0A.txt', 'mapa32electrodos.txt', grFloyd)
# graficas('MemoriaS0A.txt', 'mapa32electrodos.txt', grFloyd)
# graficas('OperacionesS0A.txt', 'mapa32electrodos.txt', grFloyd)

# Uso de las clases
# ... a√±adir m√°s v√©rtices y aristas seg√∫n sea necesario

#grFloyd = FloydWarshall()
#print("Length of shortest paths Matriz Floyd")
#print(grFloyd.shortest_paths(gr2._adjacency_matrix))

# Parte 3

# Para prim se tiene que crear una nueva grafica que se llenara con los valores ddel arbol minimo
newGraph = WeightedGraph(directed=False)
# Se envia la funcion el grafico desde donde comenzar, una grafica ya al 100%, y la nueva grafica
prim('Fz', gr, newGraph)

#print("Grafica madre")
#gr2.print_graph()

print("Grafica PRIM")
#graficarGraficas8(newGraph)
graficarGraficas32(newGraph)

newGraph.print_graph()

# Parte 4
# Llamar a las funciones para hacer los cascos convexos
# grahamPoints = graham('8elec.txt', newGraph)
# plotGraham('8elec.txt', grahamPoints)

# Parte 5
voronoi('8elec.txt', gr)
voronoi('32elec.txt', gr)
